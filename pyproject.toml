[tool.poetry]
name = "ai-codescan"
version = "0.1.0"
description = "AI-powered code review assistant with multi-agent architecture"
authors = ["AI CodeScan Team"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
# Web UI Framework
streamlit = "^1.28.0"

# Git Operations
gitpython = "^3.1.40"
pygithub = "^1.59.1"

# Graph Database
neo4j = "^5.14.0"

# LLM Integration
openai = "^1.3.0"

# Language Processing & Parsing
spacy = "^3.7.2"
tree-sitter = "^0.20.4"

# Code Analysis Tools
flake8 = "^6.1.0"
pylint = "^3.0.2"
black = "^23.9.1"
mypy = "^1.6.0"

# Data Processing
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"

# Async & HTTP
aiohttp = "^3.8.6"
httpx = "^0.25.0"

# Utilities
click = "^8.1.7"
python-dotenv = "^1.0.0"
loguru = "^0.7.2"
tenacity = "^8.2.3"

# Session Management
redis = "^5.0.1"

# Testing Framework
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"

# Language Detection
# python-linguist = "^1.3.0"  # This package has issues
# Use pygments for language detection instead
pygments = "^2.16.1"

# Performance Monitoring
psutil = "^5.9.6"

# LangGraph & Agent Framework
langgraph = "^0.2.52"
langgraph-sdk = "^0.1.27"  
langgraph-checkpoint = "^2.0.4"
langgraph-checkpoint-postgres = "^2.0.2"

# LangChain Core & Components  
langchain = "^0.3.13"
langchain-core = "^0.3.26"
langchain-community = "^0.3.13"
langchain-experimental = "^0.3.0"
langchain-openai = "^0.2.14"

# Additional LangGraph Tools
langsmith = "^0.1.137"

[tool.poetry.group.dev.dependencies]
# Development Tools
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.21.1"
black = "^23.9.1"
flake8 = "^6.1.0"
mypy = "^1.6.0"
isort = "^5.12.0"
pre-commit = "^3.5.0"

# Documentation
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"

# Jupyter for experimentation
jupyter = "^1.0.0"
notebook = "^7.0.6"

[tool.poetry.group.test.dependencies]
# Test-specific dependencies
factory-boy = "^3.3.0"
faker = "^19.12.0"
responses = "^0.23.3"

[tool.poetry.scripts]
ai-codescan = "src.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/main.py",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 